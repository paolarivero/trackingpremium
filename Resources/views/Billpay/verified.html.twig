{% extends app.user.pobox is null
    ? '::newbase.html.twig' 
    : '::newbase-public.html.twig' %}

{% block title %}
    <title>{{ form_name }}</title>
{% endblock %}

{% block body -%}

<div class="page-aside app filters">
    <div class="content">
        <button data-target=".app-nav" data-toggle="collapse" type="button" class="navbar-toggle"><span class="fa fa-chevron-down"></span></button>
        <h2 class="page-title">Filtros</h2>
        <p class="description">Buscador Avanzado</p>
       
    </div>
    <div class="app-nav collapse">
        <div class="content">
            <div class="form-group">
                <label class="control-label">Desde:</label>
                <div data-min-view="2" data-date-format="mm/dd/yyyy" class="input-group date datetime">
                    <input id="mindate" size="16" type="text" value="" class="form-control"><span class="input-group-addon btn btn-primary"><span class="glyphicon glyphicon-th"></span></span>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label">Hasta:</label>
                <div data-min-view="2" data-date-format="mm/dd/yyyy" class="input-group date datetime">
                    <input id="maxdate" size="16" type="text" value="" class="form-control"><span class="input-group-addon btn btn-primary"><span class="glyphicon glyphicon-th"></span></span>
                </div>
            </div>
            
            <div class="form-group">
                <label class="control-label">Tipo de pago:</label>
                <select id="findPaidtype" class="select2">
                    <option value="Todos">Todos</option>
                    {% for paidtype in paidtypes %}
                        <option value="{{ paidtype.name }}">{{ paidtype.name }}</option>
                    {% endfor %}
                </select>
            </div>
            
        </div>
    </div>
</div>

<div id="pcont" class="container-fluid">
    <div class="main-app">
        <div class="head">
            <h2>{{ form_name }}</h2><br>
            <h3>Búsqueda</h3>
            <input type="text" id="globalfilter" placeholder="Factura/Cliente/Currency" class="form-control">
        </div>
        
        <div class="block-flat" style=" padding-top: 0px;">
            <div class="content" style=" padding-top: 0px;">
               <div id="mydiv" style="width:70%">
                <table id="payTable" class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0" width="100%">
                    <thead id="headrec">
                        <tr>
                            <th></th>
                            <th>Factura</th>
                            <th>Cliente</th>
                            <th>Fecha</th>
                            <th>Tipo</th>
                            <th>Monto ($)</th>
                            <th>Currency</th>
                            <th>Taza</th>
                            <th>Cuenta</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for entity in entities %}
                            <tr>
                                <td>{{ entity.id }}</td>
                                <td style="text-align:center;"><a  class="btn btn-success btn-sm btn-flat" href="{{ path('bill_show', { 'id': entity.bill.id }) }}">{{ entity.bill.number }}</a></td>
                                <td style="text-align:center;"><a  class="btn btn-success btn-sm btn-flat" href="{{ path('customer_show', { 'id': entity.bill.customer.id }) }}">{{ entity.bill.customer }}</a></td>
                                <td>{{ entity.paydate|date('m/d/Y H:i:s') }}</td>
                                <td>{{ entity.paidtype }}</td>
                                <td>{{ entity.amount }}</td>
                                <td>{{ entity.currency }}</td>
                                <td>{{ entity.conversion }}</td>
                                {% if entity.account is not null %}
                                    <td>{{ entity.account }}</td>
                                {% else %}
                                    <td>N/A</td>
                                {% endif %}
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
                <table id="foottable" class="no-border">
                    <tbody class="no-border-y">
                        <tr>
                        <td><h3>Total en pagos: </h3></td>
                        <td style="text-align:left"><h3 id="thetotal"> </h3></td>
                        </tr>
                    </tbody>
                </table>
                <table class="no-border">
                    <tbody class="no-border-y">
                        <tr>
                        <td>
                            <button type="button" onClick="history.go(-1);return true;" class="btn btn-default" >Regresar</button>
                        </td>
                        </tr>
                    </tbody>
                </table>
                </div>
            </div>
        </div>
    </div>
</div>    


{% endblock %}
{% block javascripts %}  

<script type="text/javascript">
    function formatDate(datein) {
        var date = new Date(datein);
        var monthNames = [
            "Ene", "Feb", "Mar",
            "Abr", "May", "Jun", "Jul",
            "Ago", "Sep", "Oct",
            "Nov", "Dic"
        ];

        var day = date.getDate();
        var monthIndex = date.getMonth();
        var year = date.getFullYear();

        return day + monthNames[monthIndex] + ' ' + year;
    }
    function searchBis(str_search) {
        var ret = $($.parseHTML(str_search)).text().toLowerCase();
        return ret.indexOf($('#globalfilter').val().toLowerCase()) != -1;
    }
    
    $.fn.dataTable.ext.search.push(
        function( settings, data, dataIndex ) {
     
        if ($('#globalfilter').val().trim() != '') {
            var ret0 = searchBis(data[1]);
            var ret2 = searchBis(data[2]);
            // var ret3 = searchBis(data[4]);
            var ret4 = searchBis(data[6]);
            return ( ret2  || ret0 || ret4);
        } else {
            return true;
        }
        
    });
    $.fn.dataTable.Api.register( 'sum()', function ( ) {
        return this.flatten().reduce( function ( a, b ) {
            if ( typeof a === 'string' ) {
                a = a.replace(/[^\d.-]/g, '') * 1;
            }
            if ( typeof b === 'string' ) {
                b = b.replace(/[^\d.-]/g, '') * 1;
            }

            return a + b;
        }, 0 );
    } );
    $.fn.dataTableExt.afnFiltering.push(
        function( oSettings, aData, iDataIndex ) {
            var iFini = document.getElementById('mindate').value;
            var iFfin = document.getElementById('maxdate').value;
            var iStartDateCol = 3;
            var iEndDateCol = iStartDateCol;
    
            iFini=iFini.substring(6,10) + iFini.substring(0,2)+ iFini.substring(3,5);
            iFfin=iFfin.substring(6,10) + iFfin.substring(0,2)+ iFfin.substring(3,5);
    
            // console.log(iFini + ' ' + iFfin);
            
            var datofini=aData[iStartDateCol].substring(6,10) + aData[iStartDateCol].substring(0,2)+ aData[iStartDateCol].substring(3,5);
            var datoffin= datofini;
            /*
            aData[iEndDateCol].substring(6,10) + aData[iEndDateCol].substring(3,5)+ aData[iEndDateCol].substring(0,2);
            // console.log(datofini + ' ' + datoffin); */
    
            if ( iFini === "" && iFfin === "" )
            {
                return true;
            }
            else if ( iFini <= datofini && iFfin === "")
            {
                return true;
            }
            else if ( iFfin >= datoffin && iFini === "")
            {
                return true;
            }
            else if (iFini <= datofini && iFfin >= datoffin)
            {
                return true;
            }
            return false;
        }
    );
    
    $(document).ready(function () {
        $thisPayTable=$('#payTable').DataTable({
            "ordering": true,
            "responsive": true,
            "searching": true,
            "info":     true,
            "lengthChange": true,
            "scrollX": true,
            "paginate": true,
            "pageLength": 5,
            "lengthMenu": [[5, 10, 15, 20, 25, 30, -1], [5, 10, 15, 20, 25, 30, "Todos"]],
            //"columns": [ {sortable: false},  {sortable: false},  null, null, {sortable: false}, {sortable: false}, null ],
            
            "columnDefs": [
             {   
                "targets": [ 0 ],
                "visible": false,
                "searchable": true,
            },
            {   
                "targets": [ 1 ],
                "visible": true,
                "searchable": true,
            },
            {   
                "targets": [ 2 ],
                "visible": true,
                "searchable": true,
            },
            {   
                "targets": [ 3 ],
                "visible": true,
                "searchable": true,
            },
            {   
                "targets": [ 4 ],
                "visible": true,
                "searchable": true,
            },
            {   
                "targets": [ 6 ],
                "visible": true,
                "searchable": true,
            },
            { "type": 'date', "targets": 3 },
            ],
            
            "order": [[ 3, "desc" ]],
            "language": {
                "sSearch": "Buscar",
                "lengthMenu": 'Mostrando  _MENU_  "Pagos" por página',
                        "zeroRecords": "<div style=\"color:red;\">Lo siento no se encontraron Pagos</div>",
                "sInfo": "Mostrando _START_ a _END_ de _TOTAL_ Pagos",
                        "infoEmpty": "No hay registros disponibles",
                        "infoFiltered": "(Filtradas de un total de _MAX_ )",
                "searchPlaceholder": "Número/Remitente/Destinatario",
                "paginate" : {
                                first:    '«',
                                previous: '‹',
                                next:     '›',
                                last:     '»'
                    }
                },
            "pagingType": "full_numbers",
            "sDom": '<"top"B>rt<"bottom"lp><"clear">',
            "fnDrawCallback": function(oSettings) {
                    if ((oSettings._iDisplayLength >= oSettings.fnRecordsDisplay()) ||  (oSettings._iDisplayLength == -1)) {
                        $(oSettings.nTableWrapper).find('.dataTables_paginate').hide();
                    } else {
                        $(oSettings.nTableWrapper).find('.dataTables_paginate').show();
                    }
                    if (oSettings.fnRecordsDisplay() == 0) {
                        $('#foottable').hide();
                        $(oSettings.nTableWrapper).find('.dataTables_length').hide();
                    } else {
                        $('#foottable').show();
                        $(oSettings.nTableWrapper).find('.dataTables_length').show();
                    }
                    
                     var api = this.api();
                     var total = api.column( 5, { filter : 'applied'} ).data().sum()
                     document.getElementById("thetotal").innerHTML = total.toFixed(2) + '$';
                     //console.log();
                    
            },
        });
        $('#globalfilter').on( 'keyup', function () {
            $thisPayTable.draw();
        } );
        $('#findPaidtype').change( function () {
                if (this.value == "Todos" ) {
                    $thisPayTable.columns( 4 ).search('').draw();
                } else {
                    $thisPayTable.columns( 4 ).search( this.value ).draw();
                }
            } );
        
        $('#mindate').change( function() { $thisPayTable.draw(); } );
        $('#maxdate').change( function() { $thisPayTable.draw(); } );
        
        
        $('#mydiv').width("100%");
        $thisPayTable.responsive.rebuild();
        $thisPayTable.responsive.recalc();
        $thisPayTable.draw(false);
        $( window ).resize(function() {
            $thisPayTable.responsive.rebuild();
            $thisPayTable.responsive.recalc();
            $thisPayTable.draw(false);
        });
    });
</script>
{% endblock %}
