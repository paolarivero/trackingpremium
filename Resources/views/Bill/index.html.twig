{% extends '::newbase.html.twig' %}

{% block title %}
    <title>Facturas</title>
{% endblock %}

{% block body -%}

<div class="page-aside app filters">
    <div class="content">
        <button data-target=".app-nav" data-toggle="collapse" type="button" class="navbar-toggle"><span class="fa fa-chevron-down"></span></button>
        <h2 class="page-title">Filtros</h2>
        <p class="description">Buscador Avanzado</p>
        <h4>
        <select id="tfecha">
            <option value="2">Creación</option>
            <option value="3">Vencimiento</option>
        </select>
        </h4>
    </div>
    <div class="app-nav collapse">
        <div class="content">
            <div class="form-group">
                <label class="control-label">Desde:</label>
                <div data-min-view="2" data-date-format="mm/dd/yyyy" class="input-group date datetime">
                    <input id="mindate" size="16" type="text" value="" class="form-control"><span class="input-group-addon btn btn-primary"><span class="glyphicon glyphicon-th"></span></span>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label">Hasta:</label>
                <div data-min-view="2" data-date-format="mm/dd/yyyy" class="input-group date datetime">
                    <input id="maxdate" size="16" type="text" value="" class="form-control"><span class="input-group-addon btn btn-primary"><span class="glyphicon glyphicon-th"></span></span>
                </div>
            </div>

            <label class="control-label">Status:</label>
            <select id="findStatus" class="select2">
                <option value="Cualquiera">Cualquiera</option>
                <option value="Pendiente">Pendiente</option>
                <option value="Cobrada">Cobrada</option>
            </select>
        </div>
    </div>
</div>
<div id="pcont" class="container-fluid">
    <div class="main-app">
        <div class="head">
            <h3>Búsqueda</h3>
            <input type="text" id="globalfilter" placeholder="Número/Cliente" class="form-control">
        </div>

        <div class="filters" style="background-color: #ffffff;">
          <div class="row">
              <div class="col-sm-10 col-md-8">
                    <p style="display:inline;margin-left: 6px;" id="currentdate"></p><BR>
                    <div class="btn-group" style="margin-bottom: 5px;margin-top: 4px;">

                            <button type="button" class="btn btn-default">Reportes</button>
                            <button type="button" data-toggle="dropdown" class="btn btn-default dropdown-toggle">
                            <span class="caret"></span><span class="sr-only">Opciones</span></button>
                            <ul role="menu" class="dropdown-menu">
                                    <li><a id="btnExport" onclick="javascript:xport.toCSV('billTable');" >Exportar Excel</a></li>
                                    <li><a id="btnExport1" >Exportar PDF </a></li>


                            </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="block-flat" style=" padding-top: 0px;">
            <div class="content" style=" padding-top: 0px;">
               <div id="mydiv" style="width:60%">
                    <table id="billTable" class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0" width="100%">
                        <thead>
                            <tr>
                                <th>Número</th>
                                <th>Cliente</th>
                                <th>Creación</th>
                                <th>Vencimiento</th>
                                <th>Nro de Guías</th>
                                <th>Monto</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for entity in entities %}
                                {% set total = 0 %}
                                {% for guide in entity.guides %}
                                    {% set total = total + guide.totalpaid %}
                                {% endfor %}
                                <tr>
                                    {% set head = entity.guides|first %}
                                    <td><a  class="btn btn-success btn-sm btn-flat" href="{{ path('bill_show', { 'id': entity.id }) }}">{{ entity.number }}</a></td>
                                    <td><a  class="btn btn-success btn-sm btn-flat" href="{{ path('customer_show', { 'id': entity.customer.id }) }}">{{ entity.customer }}</a></td>
                                    <td>{{ entity.creationdate|date('m/d/Y') }}</td>
                                    <td>{{ entity.expdate|date('m/d/Y') }}</td>
                                    <td>{{ entity.guides | length }}</td>
                                    <td>{{ total }}</td>
                                    <td>{{ entity.status }}</th>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                 </div>
            </div>
        </div>
    </div>
</div>


{% endblock %}
{% block javascripts %}
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.22/pdfmake.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>

<script type="text/javascript">

$("body").on("click", "#btnExport1", function () {
          html2canvas($('#billTable')[0], {
              onrendered: function (canvas) {
                  var data = canvas.toDataURL();
                  var docDefinition = {
                      content: [{
                          image: data,
                          width: 500
                      }]
                  };
                  pdfMake.createPdf(docDefinition).download("Table.pdf");
              }
          });
      });
function fnExcelReport()
{
    var tab_text="<table border='2px'><tr bgcolor='#87AFC6'>";
    var textRange; var j=0;
    tab = document.getElementById('billTable'); // id of table

    for(j = 0 ; j < tab.rows.length ; j++)
    {
        tab_text=tab_text+tab.rows[j].innerHTML+"</tr>";
        //tab_text=tab_text+"</tr>";
    }

    tab_text=tab_text+"</table>";
    tab_text= tab_text.replace(/<A[^>]*>|<\/A>/g, "");//remove if u want links in your table
    tab_text= tab_text.replace(/<img[^>]*>/gi,""); // remove if u want images in your table
    tab_text= tab_text.replace(/<input[^>]*>|<\/input>/gi, ""); // reomves input params

    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))      // If Internet Explorer
    {
        txtArea1.document.open("txt/html","replace");
        txtArea1.document.write(tab_text);
        txtArea1.document.close();
        txtArea1.focus();
        sa=txtArea1.document.execCommand("SaveAs",true,"Say Thanks to Sumit.xls");
    }
    else                 //other browser not tested on IE 11
        sa = window.open('data:application/vnd.ms-excel,' + encodeURIComponent(tab_text));

    return (sa);
}



var xport = {
  _fallbacktoCSV: true,
  toXLS: function(tableId, filename) {
    this._filename = (typeof filename == 'undefined') ? tableId : filename;

    //var ieVersion = this._getMsieVersion();
    //Fallback to CSV for IE & Edge
    if ((this._getMsieVersion() || this._isFirefox()) && this._fallbacktoCSV) {
      return this.toCSV(tableId);
    } else if (this._getMsieVersion() || this._isFirefox()) {
      alert("Not supported browser");
    }

    //Other Browser can download xls
    var htmltable = document.getElementById(tableId);
    var html = htmltable.outerHTML;

    this._downloadAnchor("data:application/vnd.ms-excel" + encodeURIComponent(html), 'xls');
  },
  toCSV: function(tableId, filename) {
    this._filename = (typeof filename === 'undefined') ? tableId : filename;
    // Generate our CSV string from out HTML Table
    var csv = this._tableToCSV(document.getElementById(tableId));
    // Create a CSV Blob
    var blob = new Blob([csv], { type: "text/csv" });

    // Determine which approach to take for the download
    if (navigator.msSaveOrOpenBlob) {
      // Works for Internet Explorer and Microsoft Edge
      navigator.msSaveOrOpenBlob(blob, this._filename + ".csv");
    } else {
      this._downloadAnchor(URL.createObjectURL(blob), 'csv');
    }
  },
  _getMsieVersion: function() {
    var ua = window.navigator.userAgent;

    var msie = ua.indexOf("MSIE ");
    if (msie > 0) {
      // IE 10 or older => return version number
      return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
    }

    var trident = ua.indexOf("Trident/");
    if (trident > 0) {
      // IE 11 => return version number
      var rv = ua.indexOf("rv:");
      return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10);
    }

    var edge = ua.indexOf("Edge/");
    if (edge > 0) {
      // Edge (IE 12+) => return version number
      return parseInt(ua.substring(edge + 5, ua.indexOf(".", edge)), 10);
    }

    // other browser
    return false;
  },
  _isFirefox: function(){
    if (navigator.userAgent.indexOf("Firefox") > 0) {
      return 1;
    }

    return 0;
  },
  _downloadAnchor: function(content, ext) {
      var anchor = document.createElement("a");
      anchor.style = "display:none !important";
      anchor.id = "downloadanchor";
      document.body.appendChild(anchor);

      // If the [download] attribute is supported, try to use it

      if ("download" in anchor) {
        anchor.download = this._filename + "." + ext;
      }
      anchor.href = content;
      anchor.click();
      anchor.remove();
  },
  _tableToCSV: function(table) {
    // We'll be co-opting `slice` to create arrays
    var slice = Array.prototype.slice;

    return slice
      .call(table.rows)
      .map(function(row) {
        return slice
          .call(row.cells)
          .map(function(cell) {
            return '"t"'.replace("t", cell.textContent);
          })
          .join(",");
      })
      .join("\r\n");
  }
};


    function formatDate(date) {
        var monthNames = [
            "Enero", "Febrero", "Marzo",
            "Abril", "Mayo", "Junio", "Julio",
            "Agosto", "Septiembre", "Octubre",
            "Noviembre", "Diciembre"
        ];

        var day = date.getDate();
        var monthIndex = date.getMonth();
        var year = date.getFullYear();

        return day + ' de ' + monthNames[monthIndex] + ' ' + year;
    }
    function searchBis(str_search) {
        var ret = $($.parseHTML(str_search)).text().toLowerCase();
        return ret.indexOf($('#globalfilter').val().toLowerCase()) != -1;
    }
    $.fn.dataTable.ext.search.push(
        function( settings, data, dataIndex ) {
        if ($('#globalfilter').val().trim() != '') {
            var ret0 = searchBis(data[0]);
            var ret2 = searchBis(data[1]);
            // var ret3 = searchBis(data[3]);
            return ( ret0 || ret2 );
        } else {
            return true;
        }

    });
    $.fn.dataTableExt.afnFiltering.push(
        function( oSettings, aData, iDataIndex ) {
            var iFini = document.getElementById('mindate').value;
            var iFfin = document.getElementById('maxdate').value;
            var iStartDateCol = $("#tfecha").val();
            var iEndDateCol = iStartDateCol;
            iFini=iFini.substring(6,10) + iFini.substring(0,2)+ iFini.substring(3,5);
            iFfin=iFfin.substring(6,10) + iFfin.substring(0,2)+ iFfin.substring(3,5);
            var datofini=aData[iStartDateCol].substring(6,10) + aData[iStartDateCol].substring(0,2)+ aData[iStartDateCol].substring(3,5);
            var datoffin= datofini;

            if ( iFini === "" && iFfin === "" ) {
                return true;
            } else if ( iFini <= datofini && iFfin === "") {
                return true;
            } else if ( iFfin >= datoffin && iFini === "") {
                return true;
            } else if (iFini <= datofini && iFfin >= datoffin) {
                return true;
            }
            return false;
        }
    );
    $(document).ready(function () {
        document.getElementById("currentdate").innerHTML = formatDate(new Date());
        $thisBillTable=$('#billTable').DataTable({
            "ordering": true,
            "searching": true,
            "info":     false,
            "lengthChange": true,
            "scrollX": true,
            "pageLength": 10,
            "lengthMenu": [[10, 15, 20, 25, 30, -1], [10, 15, 20, 25, 30, "Todos"]],
            "columns": [ null, null,  null, null, {"searchable": false},
                        {"searchable": false}, null,],
            "columnDefs": [
                { "type": 'date', "targets": 2 },
                { "type": 'date', "targets": 3 },
            ],
            "order": [[ 2, "desc" ]],
            "language": {
                "sSearch": "Buscar",
                "lengthMenu": 'Mostrando  _MENU_  "Facturas" por página',
                "zeroRecords": "<div style=\"color:red;\">Lo siento no se encontraron Facturas</div>",
                "sInfo": "Mostrando _START_ a _END_ de _TOTAL_ Facturas",
                "infoEmpty": "No hay registros disponibles",
                "infoFiltered": "(Filtradas de un total de _MAX_ )",
                "searchPlaceholder": "Número/Remitente/Destinatario",
                "paginate" : {
                    first:    '«',
                    previous: '‹',
                    next:     '›',
                    last:     '»'
                }
            },
            "pagingType": "full_numbers",
            "sDom": '<"top"i>rt<"bottom"lp><"clear">',
            "fnDrawCallback": function(oSettings) {
                if ((oSettings._iDisplayLength >= oSettings.fnRecordsDisplay()) ||  (oSettings._iDisplayLength == -1)) {
                    $(oSettings.nTableWrapper).find('.dataTables_paginate').hide();
                } else {
                    $(oSettings.nTableWrapper).find('.dataTables_paginate').show();
                }
            },
        });
        $('#globalfilter').on( 'keyup', function () {
            $thisBillTable.draw();
        } );

        $('#tfecha').change( function() {
            if ($('#mindate').val() || $('#maxdate').val() ) {
                $thisBillTable.draw();
            }
        });
        $('#mindate').change( function() { $thisBillTable.draw(); } );
        $('#maxdate').change( function() { $thisBillTable.draw(); } );

        $('#mydiv').width("100%");
        $thisBillTable.responsive.rebuild();
        $thisBillTable.responsive.recalc();
        $thisBillTable.draw();
        $( window ).resize(function() {
            $thisBillTable.responsive.rebuild();
            $thisBillTable.responsive.recalc();
            $thisBillTable.draw();
        });
        $('#findStatus').change( function () {
            utilityLib.redrawTable($thisBillTable, '#mydiv', '50%', 1);
            if (this.value == "Cualquiera" ) {
                $thisBillTable.columns( 6 ).search('').draw();
            } else {
                $thisBillTable.columns( 6 ).search( this.value ).draw();
            }
            utilityLib.redrawTable($thisBillTable, '#mydiv', '100%', 1);
        } );
    });
</script>
{% endblock %}
