<?php
// src/NvCarga/Bundle/Entity/WHrec.php

namespace NvCarga\Bundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity
 * @ORM\Table(name="whrec")
 * @ORM\HasLifecycleCallbacks()
 */
class WHrec
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

     /**
     * @ORM\Column(type="string", length=30, unique=false, nullable=false)
     */
    protected $number;
    /**
     * @ORM\ManyToOne(targetEntity="Agency")
     * @ORM\JoinColumn(name="agency_id", referencedColumnName="id")
     */
    protected $agency;
   /**
     * @ORM\ManyToOne(targetEntity="User")
     * @ORM\JoinColumn(name="receiptdby_id", referencedColumnName="id")
     */
    protected $receiptd_by;
    /**
     * @ORM\ManyToOne(targetEntity="Customer", inversedBy="shipped")
     * @ORM\JoinColumn(name="shipper_id", referencedColumnName="id")
     */
    protected $shipper;
    /**
     * @ORM\ManyToOne(targetEntity="Baddress")
     * @ORM\JoinColumn(name="receiver_id", referencedColumnName="id")
     */
    protected $receiver;
    /**
     * @ORM\Column(type="datetime")
     */
    protected $creationdate;
    /**
     * @ORM\Column(type="text", length=200, nullable=true)
     */
    protected $note;
   /** 
    * @ORM\Column(type="string", columnDefinition="ENUM('RECIBIDO', 'PROCESADO', 'ANULADO')" ) 
    */ 
    protected $status;
    
    /**
     * @ORM\OneToOne(targetEntity="Guide", inversedBy="whrec")
     * @ORM\JoinColumn(name="guide_id", referencedColumnName="id")
     */
    protected $guide;
    
    /**
     * @ORM\ManyToOne(targetEntity="Receipt", inversedBy="receipts")
     * @ORM\JoinColumn(name="master_id", referencedColumnName="id")
     */
    protected $master;
    /**
     * @var ArrayCollection
     * @ORM\OneToMany(targetEntity="Receipt", mappedBy="whrec")
     */
    protected $receipts;
    /**
     * @ORM\ManyToOne(targetEntity="Maincompany")
     * @ORM\JoinColumn(name="maincompany_id", referencedColumnName="id")
     */
    protected $maincompany;
    /**
     * @Assert\File(
     *     maxSize = "512000",
     *     maxSizeMessage = "El tamaño del archivo debe ser menor a  {{ limit }} bytes",
     *     mimeTypes = {"image/jpeg", "image/png"},
     *     mimeTypesMessage = "Por favor, seleccione un tipo de archivo válido (png/jpg)")
     */
     private $file;
     
     /**
     * @ORM\Column(name="signature", type="string", length=255, nullable=true)
     */
    protected $signature;
    
    /**
     * @var ArrayCollection
     */
    protected $packages;
    
    /**
     * @var ArrayCollection
     * @ORM\OneToMany(targetEntity="Statuswhrec", mappedBy="whrec")
     */
    protected $liststatus;
    /**
     @ORM\Column(type="boolean", options={"default":false})
     */
    protected $statusguide;
    
    public function __construct()
    {
        $this->receipts = new \Doctrine\Common\Collections\ArrayCollection();
        $this->packages = new \Doctrine\Common\Collections\ArrayCollection();
        $this->liststatus = new \Doctrine\Common\Collections\ArrayCollection();
    }

    public function addPackage(\NvCarga\Bundle\Entity\Package $package)
    {
        $this->packages[] = $package;

        return $this;
    }

    public function removePackage(\NvCarga\Bundle\Entity\Package $package)
    {
	
        $this->packages->removeElement($package);
    }

    public function getPackages()
    {
        return $this->packages;
    }
    public function newpackages()
    {
        $this->packages = new \Doctrine\Common\Collections\ArrayCollection();
    }
    public function setFile($file)
    {
        $this->file = $file;

        return $this;
    }
    public function uploadSignature($path) {
        $file = $this->getFile();

        $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

        // moves the file to the directory where Files are stored
        $file->move(
            $path,
            $fileName
        );

        // updates the 'File' property to store the PDF file name
        // instead of its contents
        if ($this->getSignature()) {
             unlink($path . '/' . $this->getSignature());
        }
        $this->setSignature($fileName);
    }
    
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set number
     *
     * @param string $number
     *
     * @return WHrec
     */
    public function setNumber($number)
    {
        $this->number = $number;

        return $this;
    }

    /**
     * Get number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->number;
    }

    /**
     * Set creationdate
     *
     * @param \DateTime $creationdate
     *
     * @return WHrec
     */
    public function setCreationdate($creationdate)
    {
        $this->creationdate = $creationdate;

        return $this;
    }

    /**
     * Get creationdate
     *
     * @return \DateTime
     */
    public function getCreationdate()
    {
        return $this->creationdate;
    }


    /**
     * Set note
     *
     * @param string $note
     *
     * @return WHrec
     */
    public function setNote($note)
    {
        $this->note = $note;

        return $this;
    }

    /**
     * Get note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->note;
    }

    /**
     * Set status
     *
     * @param string $status
     *
     * @return WHrec
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set signature
     *
     * @param string $signature
     *
     * @return WHrec
     */
    public function setSignature($signature)
    {
        $this->signature = $signature;

        return $this;
    }

    /**
     * Get signature
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * Set agency
     *
     * @param \NvCarga\Bundle\Entity\Agency $agency
     *
     * @return WHrec
     */
    public function setAgency(\NvCarga\Bundle\Entity\Agency $agency = null)
    {
        $this->agency = $agency;

        return $this;
    }

    /**
     * Get agency
     *
     * @return \NvCarga\Bundle\Entity\Agency
     */
    public function getAgency()
    {
        return $this->agency;
    }

    /**
     * Set receiptdBy
     *
     * @param \NvCarga\Bundle\Entity\User $receiptdBy
     *
     * @return WHrec
     */
    public function setReceiptdBy(\NvCarga\Bundle\Entity\User $receiptdBy = null)
    {
        $this->receiptd_by = $receiptdBy;

        return $this;
    }

    /**
     * Get receiptdBy
     *
     * @return \NvCarga\Bundle\Entity\User
     */
    public function getReceiptdBy()
    {
        return $this->receiptd_by;
    }

    /**
     * Set shipper
     *
     * @param \NvCarga\Bundle\Entity\Customer $shipper
     *
     * @return WHrec
     */
    public function setShipper(\NvCarga\Bundle\Entity\Customer $shipper = null)
    {
        $this->shipper = $shipper;

        return $this;
    }

    /**
     * Get shipper
     *
     * @return \NvCarga\Bundle\Entity\Customer
     */
    public function getShipper()
    {
        return $this->shipper;
    }

    /**
     * Set receiver
     *
     * @param \NvCarga\Bundle\Entity\Baddress $receiver
     *
     * @return WHrec
     */
    public function setReceiver(\NvCarga\Bundle\Entity\Baddress $receiver = null)
    {
        $this->receiver = $receiver;

        return $this;
    }

    /**
     * Get receiver
     *
     * @return \NvCarga\Bundle\Entity\Baddress
     */
    public function getReceiver()
    {
        return $this->receiver;
    }

    /**
     * Set guide
     *
     * @param \NvCarga\Bundle\Entity\Guide $guide
     *
     * @return WHrec
     */
    public function setGuide(\NvCarga\Bundle\Entity\Guide $guide = null)
    {
        $this->guide = $guide;

        return $this;
    }

    /**
     * Get guide
     *
     * @return \NvCarga\Bundle\Entity\Guide
     */
    public function getGuide()
    {
        return $this->guide;
    }

    /**
     * Set master
     *
     * @param \NvCarga\Bundle\Entity\Receipt $master
     *
     * @return WHrec
     */
    public function setMaster(\NvCarga\Bundle\Entity\Receipt $master = null)
    {
        $this->master = $master;

        return $this;
    }

    /**
     * Get master
     *
     * @return \NvCarga\Bundle\Entity\Receipt
     */
    public function getMaster()
    {
        return $this->master;
    }

    /**
     * Add receipt
     *
     * @param \NvCarga\Bundle\Entity\Receipt $receipt
     *
     * @return WHrec
     */
    public function addReceipt(\NvCarga\Bundle\Entity\Receipt $receipt)
    {
        $this->receipts[] = $receipt;

        return $this;
    }

    /**
     * Remove receipt
     *
     * @param \NvCarga\Bundle\Entity\Receipt $receipt
     */
    public function removeReceipt(\NvCarga\Bundle\Entity\Receipt $receipt)
    {
        $this->receipts->removeElement($receipt);
    }

    /**
     * Get receipts
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getReceipts()
    {
        return $this->receipts;
    }

    /**
     * Set maincompany
     *
     * @param \NvCarga\Bundle\Entity\Maincompany $maincompany
     *
     * @return WHrec
     */
    public function setMaincompany(\NvCarga\Bundle\Entity\Maincompany $maincompany = null)
    {
        $this->maincompany = $maincompany;

        return $this;
    }

    /**
     * Get maincompany
     *
     * @return \NvCarga\Bundle\Entity\Maincompany
     */
    public function getMaincompany()
    {
        return $this->maincompany;
    }
}
